VERBOSE ?= 1
NOWERROR ?= 1
CONFIG ?= libretro
NO_USE_MIDI ?= 1
NO_USE_PORTAUDIO ?= 1
PTR64 ?= 1
TARGET ?= mame
# OS ?= linux
# TARGETOS ?= linux
PYTHON_EXECUTABLE ?= python3
REGENIE ?= 1
GITHUB_REPO ?= https://github.com/libretro/mame/
DEBUG ?= 0

export

###########################################################################
#
#   LIBRETRO PLATFORM GUESSING
#
#   If the caller doesn't specify $platform and $ARCH, we guess
#
###########################################################################

UNAME_S = $(shell uname -s)
UNAME_M = $(shell uname -m)

ifeq ($(platform),)
	platform = unix
	ifeq ($(UNAME_S),)
		platform = win
	else ifneq ($(findstring MINGW,$(UNAME_S)),)
		platform = win
	else ifneq ($(findstring MSYS,$(UNAME_S)),)
		platform = win
	else ifneq ($(findstring Darwin,$(UNAME_S)),)
		platform = osx
	else ifneq ($(findstring win,$(UNAME_S)),)
		platform = win
	else ifeq ($(UNAME_M), "i686")
		platform = linux
	endif
endif
ifneq ($(ARCH),)
	LIBRETRO_CPU = $(ARCH)
	#GENIE makefiles use this variable fr something else unset if set
	ifeq ($(ARCH),x86)
		PTR64 := 0
	endif
	ARCH :=
$(info unsetting ARCH=$(LIBRETRO_CPU))
endif

ifeq ($(LIBRETRO_CPU),)
	ifeq ($(UNAME_M),)
		ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
			LIBRETRO_CPU = x86_64
		endif
		ifeq ($(PROCESSOR_ARCHITEW6432),AMD64)
			LIBRETRO_CPU = x86_64
		endif
	else ifeq ($(UNAME_M),amd64)
		LIBRETRO_CPU = x86_64
	else
		LIBRETRO_CPU = $(UNAME_M)
	endif
endif



###########################################################################
#
#   BUILD FLAGS
#
###########################################################################


ifeq ($(DEBUG),1)
	CONFIG=libretrodbg
	SYMBOLS=1
	SYMLEVEL=1
	OPTIMIZE=g
else
	CONFIG=libretro
endif

ifneq ($(findstring win,$(platform)),)
	ifeq ($(MSYSTEM),MINGW64)
		MINGW64 ?= /mingw64
		LIBRETRO_CPU=x86_64
	else ifeq ($(MSYSTEM),MINGW32)
		MINGW32 ?= /mingw32
		LIBRETRO_CPU=x86
		PTR64=0
	else ifeq ($(MSYSTEM),CLANG32)
		MINGW32 ?= /clang32
		LIBRETRO_CPU=x86
		CC=clang
		PTR64=0
	else ifeq ($(MSYSTEM),CLANG64)
		MINGW64 ?= /clang64
		LIBRETRO_CPU=x86_64
		CC=clang
	else ifeq ($(MSYSTEM),UCRT64)
		MINGW64 ?= /ucrt64
		LIBRETRO_CPU=x86_64
		OVERRIDE_CC=clang
	endif

	LLD := $(shell command -v lld 2> /dev/null)
	ifneq ($(LLD),)
		LDOPTS=-fuse-ld=lld
	endif
	LIBRETRO_OS = windows
endif

ifeq ($(platform),android-arm)
	#buildbot fix
	ifneq ($(ANDROID_NDK_ROOT),)
	ANDROID_NDK_HOME=$(ANDROID_NDK_ROOT)
	endif
	export ANDROID_NDK_HOME ?= /opt/ndk
	PLATFLAGS += android-arm
	PTR64 :=
endif

ifeq ($(platform),android-arm64)
	#buildbot fix
	ifneq ($(ANDROID_NDK_ROOT),)
	ANDROID_NDK_HOME=$(ANDROID_NDK_ROOT)
	endif
	export ANDROID_NDK_HOME ?= /opt/ndk
	PLATFLAGS += android-arm64
	PTR64 :=
endif
ifeq ($(platform),android-x86)
#buildbot fix
	ifneq ($(ANDROID_NDK_ROOT),)
	ANDROID_NDK_HOME=$(ANDROID_NDK_ROOT)
	endif
	export ANDROID_NDK_HOME ?= /opt/ndk
	PLATFLAGS += android-x86
	PTR64 :=
endif
ifeq ($(platform),android-x86_64)
#buildbot fix
	ifneq ($(ANDROID_NDK_ROOT),)
	ANDROID_NDK_HOME=$(ANDROID_NDK_ROOT)
	endif
	export ANDROID_NDK_HOME ?= /opt/ndk
	PLATFLAGS += android-x64
	PTR64 :=
endif

ifneq ($(ANDROID_NDK_HOME),)
OK := $(shell if [ -d $(ANDROID_NDK_HOME) ]; then echo "ok"; fi)
ifeq ($(OK),)
$(error  path $(ANDROID_NDK_HOME) does not exist! please set ANDROID_NDK_HOME!)
else
$(info  ANDROID_NDK_HOME path is a valid directory $(ANDROID_NDK_HOME))
endif
endif

ifeq ($(platform),linux32)
	TARGETOS = linux
	PLATFORM =x86
	PTR64 := 0
endif

ifeq ($(platform),osx)
	DONT_USE_NETWORK=1
	OVERRIDE_CC=clang OVERRIDE_CXX=clang++
	TARGETOS="macosx"
	ifeq ($(CROSS_COMPILE),1)
		ARCHOPTS =-target $(LIBRETRO_APPLE_PLATFORM) -isysroot $(LIBRETRO_APPLE_ISYSROOT)
		#libretro cpu and and libretro os arent needed for the mac anymore builds, Ill need to make sure there not used in other places	(in the lua scripts)
		#leave as is for now but add the the platfrom and remove the conditions in LUA when ready to test. LEts get the builds working.		LIBRETRO_CPU = arm64
		LIBRETRO_OS = macosx
		LIBRETRO_CPU = arm64
		LIBRETRO_OSX_ARM64=1
		PLATFORM=arm64
		#this will be removed like x64 platfrom after the builds are working
		ARCHOPTS +=-arch $(LIBRETRO_CPU)
		#this isint needed but it confuses people and they assume ist a x64 instead of arm build when there is a makefile issue
		PLATFLAGS +=macosx_arm64_clang
	else
		LIBRETRO_OS = macosx
		LIBRETRO_CPU =x86_64
		#not set on x64 use the info from arm64 so we get the right target and path
		LIBRETRO_APPLE_PLATFORM=x86_64-apple-macos10.15
		LIBRETRO_APPLE_ISYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
		ARCHOPTS =-target $(LIBRETRO_APPLE_PLATFORM) -isysroot $(LIBRETRO_APPLE_ISYSROOT)
		PLATFORM=x64
		#we dont need to pass -arch as i fixed the condition and there and arm is added from upstream in the last pull req.
		#There is no variable in the lua scrip to disable it the other platfrom will follow suit and just use PLATFORM when we are up and running.
	endif
	PTR64 = 1
endif

ifeq ($(platform),ios-arm64)
	LIBRETRO_APPLE_PLATFORM = arm64-apple-ios14.2
	LIBRETRO_APPLE_ISYSROOT := $(shell xcodebuild -version -sdk iphoneos Path)
	ARCHOPTS =-target $(LIBRETRO_APPLE_PLATFORM) -isysroot $(LIBRETRO_APPLE_ISYSROOT)
	#the ci should set above only osx does it so far unset if its added to the ci
	#-isysroot $(LIBRETRO_APPLE_ISYSROOT)
	#-arch $(LIBRETRO_CPU) -target $(LIBRETRO_APPLE_PLATFORM) -isysroot $(IOSSDK) -miphoneos-version-min=12.0 was the flags used
	#This is my first time touching mac related stuff, someone more knowlagable of the platfrom can tweak the settings. Again the llvm is a good place to start
	# thats how i got the tagets needed.
	OVERRIDE_CC=clang OVERRIDE_CXX=clang++
	DONT_USE_NETWORK=1
	NOASM=1
	NO_USE_MIDI=1
	NO_OPENGL=1
	USE_QTDEBUG=0
	LIBRETRO_IOS=1
	#libretro cpu and and libretro os arent needed for the mac anymore builds, Ill need to make sure there not used in other places(in the lua scripts)
	#leave as is for now but add the the platfrom and remove the conditions in LUA when ready to test. LEts get the builds working.
	LIBRETRO_CPU = arm64
	LIBRETRO_OS = macosx
	TARGETOS=macosx
	PLATFORM=arm64
	LIBRETRO_IOS=1
	ARCHOPTS +=-arch $(LIBRETRO_CPU)
	PTR64 =1
	#this isint needed but it confuses people and they assume ist a x64 instead of arm build when there is a makefile issue
	PLATFLAGS +=macosx_arm64_clang
endif

ifeq ($(platform),tvos-arm64)
	LIBRETRO_APPLE_PLATFORM = arm64-apple-tvos14.2
	LIBRETRO_APPLE_ISYSROOT := $(shell xcodebuild -version -sdk appletvos Path)
	ARCHOPTS =-target $(LIBRETRO_APPLE_PLATFORM) -isysroot $(LIBRETRO_APPLE_ISYSROOT)
	#the ci should set above only osx does it so far unset if its udded to the ci
	OVERRIDE_CC=clang 
	OVERRIDE_CXX=clang++
	DONT_USE_NETWORK=1
	NOASM=1
	NO_USE_MIDI=1
	NO_OPENGL=1
	USE_QTDEBUG=0
	#libretro cpu and and libretro os arent needed for the mac anymore builds, Ill need to make sure there not used in other places(in the lua scripts)
	#leave as is for now but add the the platfrom and remove the conditions in LUA when ready to test. LEts get the builds working.
	LIBRETRO_CPU = arm64
	LIBRETRO_OS = macosx
	TARGETOS=macosx
	PLATFORM=arm64
	LIBRETRO_TVOS=1
	ARCHOPTS +=-arch $(LIBRETRO_CPU)
	OPTIMIZE=z
	PTR64 =1
	#this isint needed but it confuses people and they assume ist a x64 instead of arm build when there is a makefile issue
	PLATFLAGS +=macosx_arm64_clang
endif

#debug for buildbot helping with buildbot issues
ifeq ($(platform),)
$(error platform not set please use platform=xxx)
else
$(info platform=$(platform))
$(info PLATFROM=$(PLATFROM))
$(info cc=$(cc))
$(info CC=$(CC))
$(info CXX=$(CXX))
$(info OVERRIDE_CC=$(OVERRIDE_CC))
$(info OVERRIDE_CXX=$(OVERRIDE_CXX))
$(info CCFLAGS=$(CCFLAGS))
$(info CXXFLAGS=$(CXXFLAGS))
$(info LDFLAGS=$(LDFLAGS))
$(info ARCH=$(ARCH))
$(info arch=$(arch))
$(info NUMPROC=$(NUMPROC))
$(info MSYSTEM=$(MSYSTEM))
$(info LIBRETRO_OS=$(LIBRETRO_OS)) 
$(info LIBRETRO_CPU=$(LIBRETRO_CPU)) 
$(info PLATFORM=$(PLATFORM)) 
$(info TARGETOS=$(TARGETOS)) 
$(info ARCHOPT=$(ARCHOPT))
endif

###########################################################################
#
#   MAKE RULES
#
#   We just call upstream GENie here with appropriate args
#
###########################################################################

# MAKEFILE is set by libretro gitlab-ci, but it confuses GENIE. So, unset it.
# undefine <var> is not supported on make 3.81 (used by macosx).
MAKEFILE :=

all: build

build:
	$(MAKE) $(PLATFLAGS) 

vs2019:
	$(MAKE) $(PLATFLAGS) $ vs2019

clean:
	$(MAKE) $(PLATFLAGS)  clean

.PHONY: all build clean vs2019

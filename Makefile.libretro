
VERBOSE ?= 1
RETRO ?= 1
NOWERROR ?= 1
CONFIG ?= libretro"
NO_USE_MIDI ?= 1
NO_USE_PORTAUDIO ?= 1
PTR64 ?= 1 
TARGET ?= mame
# OS ?= linux
# TARGETOS ?= linux
PYTHON_EXECUTABLE ?= python
REGENIE ?= 1
GITHUB_REPO ?= https://github.com/libretro/mame/

###########################################################################
#
#   LIBRETRO PLATFORM GUESSING
#
#   If the caller doesn't specify $platform and $ARCH, we guess
#
###########################################################################

UNAME_S = $(shell uname -s)
UNAME_M = $(shell uname -m)
ifeq ($(platform),)
	platform = unix
	ifeq ($(UNAME_S),)
		platform = win
	else ifneq ($(findstring MINGW,$(UNAME_S)),)
		platform = win
	else ifneq ($(findstring MSYS,$(UNAME_S)),)
		platform = win
	else ifneq ($(findstring Darwin,$(UNAME_S)),)
		platform = osx
	else ifneq ($(findstring win,$(UNAME_S)),)
		platform = win
	endif
endif
ifeq ($(ARCH),)
	LIBRETRO_CPU = $(ARCH)
endif
ifeq ($(LIBRETRO_CPU),)
	ifeq ($(UNAME_M),)
		ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
			LIBRETRO_CPU = x86_64
		endif
		ifeq ($(PROCESSOR_ARCHITEW6432),AMD64)
			LIBRETRO_CPU = x86_64
		endif
	else ifeq ($(UNAME_M),amd64)
		LIBRETRO_CPU = x86_64
	else
		LIBRETRO_CPU = $(UNAME_M)
	endif
endif

###########################################################################
#
#   LIBRETRO PLATFORM-SPECIFIC CONFIGURATION
#
#   Settings needed to get MAME to build everywhere we build it
#
###########################################################################

ifeq (,$(findstring x86,$(LIBRETRO_CPU)))
	FORCE_DRC_C_BACKEND = 1
endif

ifeq ($(platform), android)
	#PTR64 = 0
	# FIXME: Pass these to GENie and test...
#	CROSS_BUILD = 1
#	FORCE_DRC_C_BACKEND = 1
else ifeq ($(platform), osx)
	PYTHON_EXECUTABLE = python
else ifneq (,$(findstring ios,$(platform)))
#	PTR64 = 0
	LIBRETRO_CPU=arm
	PYTHON_EXECUTABLE = python
	# FIXME: Pass these to GENie and test...
#	CROSS_BUILD = 1
#	FORCE_DRC_C_BACKEND = 1
endif


###########################################################################
#
#   BUILD FLAGS
#
###########################################################################

BUILDFLAGS = RETRO=$(RETRO) REGENIE=$(REGENIE) VERBOSE=$(VERBOSE) NOWERROR=$(NOWERROR) OSD="retro" NO_USE_MIDI=$(NO_USE_MIDI) NO_USE_PORTAUDIO=$(NO_USE_PORTAUDIO)

ifneq ($(PYTHON_EXECUTABLE),)
	BUILDFLAGS += PYTHON_EXECUTABLE=$(PYTHON_EXECUTABLE)
endif
ifeq ($(DEBUG),1)
	BUILDFLAGS += CONFIG=libretrodbg
else
	BUILDFLAGS += CONFIG=libretro
endif


###########################################################################
#
#   PLATFORM FLAGS
#
###########################################################################

PLATFLAGS =

ifeq ($(platform),win)
	ifeq ($(MSYSTEM),MINGW64)
		MINGW64 ?= /mingw64
		PLATFLAGS += MINGW64="$(MINGW64)"
	else ifeq ($(MSYSTEM),MINGW32)
		MINGW32 ?= /mingw32
		PLATFLAGS += MINGW32="$(MINGW32)"
	endif
endif
ifeq ($(platform),android)
	ANDROID_NDK_LLVM ?= /opt/ndk/toolchains/llvm/prebuilt/linux-x86_64
	ANDROID_NDK_ARM  ?= /opt/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64
	ANDROID_NDK_ROOT ?= /opt/ndk
	PLATFLAGS += TARGETOS="android-arm" gcc="android-arm"
	PLATFLAGS +=  ANDROID_NDK_LLVM="$(ANDROID_NDK_LLVM)"
	PLATFLAGS +=  ANDROID_NDK_ARM="$(ANDROID_NDK_ARM)"
	PLATFLAGS +=  ANDROID_NDK_ROOT="$(ANDROID_NDK_ROOT)"
	LIBRETRO_CPU :=
	ARCH :=
	LIBRETRO_OS :=
	PTR64 := 
endif
ifeq ($(platform),android-arm64)
	ANDROID_NDK_LLVM  ?= /opt/ndk/toolchains/llvm/prebuilt/linux-x86_64
	ANDROID_NDK_ARM64 ?= /opt/ndk/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64
	ANDROID_NDK_ROOT  ?= /opt/ndk
	PLATFLAGS += TARGETOS="android-arm64" gcc="android-arm64"
	PLATFLAGS += ANDROID_NDK_LLVM="$(ANDROID_NDK_LLVM)"
	PLATFLAGS += ANDROID_NDK_ARM64="$(ANDROID_NDK_ARM64)"
	PLATFLAGS += ANDROID_NDK_ROOT="$(ANDROID_NDK_ROOT)"
	LIBRETRO_CPU :=
	ARCH :=
	LIBRETRO_OS :=
	PTR64 := 
endif
ifeq ($(platform),osx)
  PLATFLAGS += DONT_USE_NETWORK=1
endif
ifneq ($(LIBRETRO_CPU),)
	PLATFLAGS += ARCH="" LIBRETRO_CPU="$(LIBRETRO_CPU)"
endif
ifneq ($(FORCE_DRC_C_BACKEND),)
	PLATFLAGS += FORCE_DRC_C_BACKEND="$(FORCE_DRC_C_BACKEND)"
endif
ifneq ($(LIBRETRO_OS),)
	PLATFLAGS += LIBRETRO_OS="$(platform)"
endif
ifneq ($(PTR64),)
	PLATFLAGS += PTR64=$(PTR64)
endif

###########################################################################
#
#   TARGET FLAGS
#
###########################################################################

TARGETFLAGS =
ifneq ($(TARGET),)
	TARGETFLAGS += TARGET=$(TARGET)
endif
ifneq ($(SUBTARGET),)
	TARGETFLAGS += SUBTARGET=$(SUBTARGET)
endif
ifneq ($(SOURCES),)
	TARGETFLAGS += SOURCES=$(SOURCES)
endif

###########################################################################
#
#   MAKE RULES
#
#   We just call upstream GENie here with appropriate args
#
###########################################################################

all: build

build:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS)

vs2015:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS) vs2015

clean:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS) clean

download_github_%:
	@rm -f mame_libretro.zip
	@echo "Cheking latest release for tag $*"
	@curl -s -S -L -O -z mame_libretro* '$(GITHUB_REPO)/releases/download/$*/mame_libretro.zip'
	@if [ -f mame_libretro.zip ]; then \
		echo "Extracting"; \
		unzip -qqo mame_libretro.zip; \
		rm -f mame_libretro.zip; \
		touch mame_libretro*; \
	else \
		echo "Up to date";\
	fi

.PHONY: all build clean vs2015

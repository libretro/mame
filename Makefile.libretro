
VERBOSE ?= 1
RETRO ?= 1
NOWERROR ?= 1
override CONFIG ?= libretro
NO_USE_MIDI ?= 1
NO_USE_PORTAUDIO ?= 1
PTR64 ?= 1
TARGET ?= mame
# OS ?= linux
# TARGETOS ?= linux
PYTHON_EXECUTABLE ?= python3
REGENIE ?= 1
GITHUB_REPO ?= https://github.com/libretro/mame/
DEBUG ?= 0
OSD ?= retro
export
###########################################################################
#
#   LIBRETRO PLATFORM GUESSING
#
#   If the caller doesn't specify $platform and $ARCH, we guess
#
###########################################################################

UNAME_S = $(shell uname -s)
UNAME_M = $(shell uname -m)

ifeq ($(platform),)
	platform = unix
	ifeq ($(UNAME_S),)
		platform = win
	else ifneq ($(findstring MINGW,$(UNAME_S)),)
		platform = win
	else ifneq ($(findstring MSYS,$(UNAME_S)),)
		platform = win
	else ifneq ($(findstring Darwin,$(UNAME_S)),)
		platform = osx
	else ifneq ($(findstring win,$(UNAME_S)),)
		platform = win
	else ifeq ($(UNAME_M), i686)
		platform = linux32
	endif
endif

#libretro doesnt like arch being set see toochain.lua

ifneq ($(ARCH),)
	LIBRETRO_CPU = $(ARCH)
	override ARCH :=
else
	override ARCH :=
endif

ifeq ($(LIBRETRO_CPU),)
	ifneq ($(UNAME_M),)
		ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
			LIBRETRO_CPU = x86_64
		else ifeq ($(PROCESSOR_ARCHITEW6432),AMD64)
			LIBRETRO_CPU = x86_64
		else ifeq ($(UNAME_M),amd64)
			LIBRETRO_CPU = x86_64
		else
			LIBRETRO_CPU = $(UNAME_M)
		endif
	endif
endif

ifeq ($(ARCH),x86)
	PTR64 := 0
endif

###########################################################################
#
#   BUILD FLAGS
#
###########################################################################


ifeq ($(DEBUG),1)
	override CONFIG=libretrodbg
	SYMBOLS=1
	SYMLEVEL=1
	OPTIMIZE=g
else
	override CONFIG=libretro
endif

###########################################################################
#
#   PLATFORM FLAGS
#
###########################################################################

PLATFLAGS =

ifneq ($(findstring win,$(platform)),)
	ifeq ($(MSYSTEM),MINGW64)
		MINGW64 ?= /mingw64
		LIBRETRO_CPU=x86_64
	else ifeq ($(MSYSTEM),MINGW32)
		MINGW32 ?= /mingw32
		LIBRETRO_CPU=x86
		PTR64=0
	else ifeq ($(MSYSTEM),CLANG32)
		MINGW32 ?= /clang32
		LIBRETRO_CPU=x86
		CC=clang
		PTR64=0
	else ifeq ($(MSYSTEM),CLANG64)
		MINGW64 ?= /clang64
		LIBRETRO_CPU=x86_64
		CC=clang
	else ifeq ($(MSYSTEM),UCRT64)
		MINGW64 ?= /ucrt64
		LIBRETRO_CPU=x86_64
		OVERRIDE_CC=clang
	endif

	LLD := $(shell command -v lld 2> /dev/null)
	ifneq ($(LLD),)
		LDOPTS=-fuse-ld=lld
	endif
	LIBRETRO_OS = win
endif

ifeq ($(platform),android-arm)
	ANDROID_NDK_LLVM ?= /opt/ndk/toolchains/llvm/prebuilt/linux-x86_64
	ANDROID_NDK_ARM  ?= /opt/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64
	ANDROID_NDK_ROOT ?= /opt/ndk
	TARGETOS=android-arm gcc=android-arm
	LIBRETRO_CPU :=
	LIBRETRO_OS :=
	PTR64 :=
endif

ifeq ($(platform),android-arm64)
	ANDROID_NDK_LLVM  ?= /opt/ndk/toolchains/llvm/prebuilt/linux-x86_64
	ANDROID_NDK_ARM64 ?= /opt/ndk/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64
	ANDROID_NDK_ROOT  ?= /opt/ndk
	TARGETOS=android-arm64 gcc=android-arm64
	LIBRETRO_CPU :=
	LIBRETRO_OS :=
	PTR64 :=
endif

ifeq ($(platform),android-x86_64)
	ANDROID_NDK_LLVM  ?= /opt/ndk/toolchains/llvm/prebuilt/linux-x86_64
	ANDROID_NDK_X64 ?= /opt/ndk/toolchains/x86_64-4.9/prebuilt/linux-x86_64
	ANDROID_NDK_ROOT  ?= /opt/ndk
	TARGETOS=android-x64 gcc=android-x64
	LIBRETRO_CPU :=
	ARCH :=
	LIBRETRO_OS :=
	PTR64 :=
endif

ifeq ($(platform),linux32)
	PTR64 := 0
endif

ifeq ($(platform),osx)
	DONT_USE_NETWORK=1
	ifeq ($(CROSS_COMPILE),1)
		LIBRETRO_CPU = arm64
		LIBRETRO_OS  = osx-arm64
		TARGET_RULE  = -arch $(LIBRETRO_CPU) -target $(LIBRETRO_APPLE_PLATFORM) -isysroot $(LIBRETRO_APPLE_ISYSROOT)
		OVERRIDE_CXX = clang $(TARGET_RULE)
		CXX = clang++ $(TARGET_RULE)
		CFLAGS   += $(TARGET_RULE)
		CPPFLAGS += $(TARGET_RULE)
		CXXFLAGS += $(TARGET_RULE)
		LDFLAGS  += $(TARGET_RULE)
	endif

endif

ifeq ($(platform),ios-arm64)
	DONT_USE_NETWORK=1
	LIBRETRO_CPU = arm64
	LIBRETRO_OS = ios-arm64
	IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
	OVERRIDE_CC  = cc -arch $(LIBRETRO_CPU) -isysroot $(IOSSDK) -miphoneos-version-min=12.0
	OVERRIDE_CXX = c++ -arch $(LIBRETRO_CPU) -isysroot $(IOSSDK) -miphoneos-version-min=12.0
	OPTIMIZE=z
endif

ifeq ($(platform),tvos-arm64)
	DONT_USE_NETWORK=1
	LIBRETRO_CPU = arm64
	LIBRETRO_OS = ios-arm64
	IOSSDK := $(shell xcodebuild -version -sdk appletvos Path)
	OVERRIDE_CC  = cc -arch $(LIBRETRO_CPU)  -isysroot $(IOSSDK)
	OVERRIDE_CXX = c++ -arch $(LIBRETRO_CPU) -isysroot $(IOSSDK)
	OPTIMIZE=z
endif

ifneq ($(LIBRETRO_OS),)
	LIBRETRO_OS=$(platform)
endif


###########################################################################
#
#   MAKE RULES
#
#   We just call upstream GENie here with appropriate args
#
###########################################################################

# MAKEFILE is set by libretro gitlab-ci, but it confuses GENIE. So, unset it.
# undefine <var> is not supported on make 3.81 (used by macosx).
MAKEFILE :=

all: build

build:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS)

vs2015:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS) vs2015

clean:
	$(MAKE) $(BUILDFLAGS) $(PLATFLAGS) $(TARGETFLAGS) clean

.PHONY: all build clean vs2015
